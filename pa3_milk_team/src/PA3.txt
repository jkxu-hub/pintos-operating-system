            +---------------------------+
            |          CS 140          |
            | PROJECT 3: VIRTUAL MEMORY |
            |      DESIGN DOCUMENT      |
            +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Jeffrey Xu <jkxu@buffalo.edu>
Justin Tran <jtran9@buffalo.edu>
Adonis Jackson <adonisja@buffalo.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

            PAGE TABLE MANAGEMENT
            =====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread
  {
    struct hash sup_page_table;         /*Supplemental Page Table. */
    void *user_esp;                     /* User's stack pointer. */
  };
  sup_page_table: is a hash table independent to each process. 
  It stores information about a page so that a frame can be allocated during a page fault

  user_esp: stores the stack pointer value when the initial change from user to kernel mode occurs.
  It is needed in the page fault handler.

 frame_hash_table: global frame table.

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for accessing the data
>> stored in the SPT about a given page.
SPT is represented as a hash table. Its key is the addr of the page and the value is a supplemental_page_table_entry
which stores information about a page such as the read_bytes and zero_bytes.

To retrieve a supplemental_page_table_entry which stores all the data. We must pass in an address to get page entry that matches
the key that the (k,v) page pairing was initialized with. We do this by rounding down the fault_addr in page fault handler to
get the page aligned address. This addrsss is then passed into get_page_entry which is a function that is
equivalent to HashTable.get(k) in java. At this point, we have supplemental_page_table_entry, the data for our page,
and we can operate on this data accordingly.


>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?
Not implemented in phase 1, but hypothetically we would store a list member in frame_table entry that would
have every mapped page that points to the frame. Upon eviction of the frame, we would operate on the list
acordingly.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?
A lock synchronization variable is used. Namely, frame_lock. Ensures only 1 process can access the frame table
at the same time.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?
Because of runtime and space efficiency. Access to a wide array of data was needed for each page to frame mapping. 
Our frame_hash_table stores a mapping of virtual to phsycial memory. Access and find time is O(1) unlike a list.
Space complexity is bounded by the number of entries in the hash table, unlike an array which is bounded arbitrarily. 

               PAGING TO AND FROM DISK
               =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

- not implemented
---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.
Not implemented in phase 1, but hypothetically, we would implement the clock algorithm.
We would maintain a list of pages in memory. And we would maintain an iterator which
would point to the the last page that had been examined in a page fault. When a page
fault occurs we would iterate the iterator until a page with an access bit equal to zero is
found. At this point we evict that page.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?
the frame table, that contains a member with a list of mapped pages, is zeroed. After this
a new list pointing containing the page mapped from process p is created.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.
If the faulted address is within 32 bytes of stack pointer in either direction (+/-) it is valid. Otherwise 
it is not. 

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)
The basics of our vm synchronization is that everytime we allocate or remove a frame we use  lock_acquire(&frame_lock);
and then after we're doing changing anything we release the lock. We do this to create an order of locks acquired among different 
threads to prevent a deadlock.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?
We enable interrupts to focus on the page fault in process P. Then we handle the page fault
and then go to the next process that needs resources. This gives a order of our critical
processes.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?
We use interruptions like the above answer.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?
On the initial load we allocate 1 page and after that we expand the stack every time a frame needs 
to be allocated. We validate the address in a if statement and if its not valid we simply kill the user process
and handle the page fault in the kernal.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.
We use a lock each time we allocate or remove to a frame. This is done so many processes
could take place simultaneously and allow high parallelism or simply improve performace and the
effiency of the program. Using one lock for the vm would cause only one thread or process could access
the vm at a time.

             MEMORY MAPPED FILES
             ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

The differences between swap pages and other pages are stored in swap space and are grabbed during the page fault. Eviction of swap pages involves moving them between the physical memory and swap space while eviction within other pages may need to be written and stored.


>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.
By checking if the accesses are in the stack pointer range which is 32 bytes.
---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

At first we utilized a different data structure with supplemental page table to improve our overall implementation. We share as much code as we can so it may reduce redundancy.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
